#!/bin/zsh

################################################################
#
#	AppleTV_TagsNnames.sh  
#		Script pulls list of all AppleTVs in Mosyle and makes
#		sure they have asset tags, tags, and named after their tags.
#
#		JCS - 3/19/2020  -v1
#		JCS - 3/22/2021 -v2 --HUGE MOSYLE REWRITE and IIQ too
#
################################################################
LOG="/usr/local/Smillieware/Logs/AppleTV_TagsNnames.log"	#Output of script Logging
SlackIt="/tmp/AppleTVSlackit.txt"	#File to gather important Slack Messages
#Get the Current Epoch time
current_time=$(date '+%s')


#####File with Mosyle API Keys in the form of:
# MOSYLE_API_key="YourMosyleAPIKey"
source /tmp/Someplace/.MosyleAPI
APIKey="$MOSYLE_API_key"

####File with IncidentIQ Keys in the form of:
# apitoken="S0M3KeY"
# siteid="IIQ_SiteID"
# baseurl="https://YourSite.incidentiq.com/api/v1.0
source /tmp/Someplace/.incidentIQ
#apitoken, siteid, and baseurl all come from the source file above.
Auth=$(echo "Authorization: Bearer $apitoken")


IFS=$'\n'

#Remove any prior works generated by this script
rm -Rf /tmp/Mosyle_active_ATVs.txt

#Initialize the base count variable. This will be
#used to figure out what page we are on and where
#we end up.
THECOUNT=0

################################
#          FUNCTIONS           #
################################
#Logging Function
log_line() {
    LINE=$1
    TODAY=`date '+%a %x %X'`
    #Print on stdout
    echo "$TODAY =====>$LINE"
    #Log to file
    echo "AppleTV_TagsNnames.sh ++> $TODAY =====> $LINE" >> $LOG
}

IIQ_Query() {
	#This query connects to incidentIQ, does a serial lookup and returns: ASSETTAG, MOSYLE TAG, and INVENTORY STATUS
	#Ask InicdentIQ for info.  Any routine can be substituted here as long as in the end we get the fields above filled.
	Query="$baseurl/assets/serial/$SERIALNUMBER"
	ASSETTAG=$(curl -s -k -H "$siteid" -H "$Auth" -H "Client: ApiClient" -X GET "$Query" | grep "AssetTag" | cut -d ':' -f 2 | cut -d ',' -f 1 | head -1 | tr -d \")
	#I have a custom field in IIQ which holds what I want the AppleTV to be named.  Below we query by the fields ID number.
	MosyleTag=$(curl -s -k -H "$siteid" -H "$Auth" -H "Client: ApiClient" -X GET "$Query" | sed -n '/"3cbe1b19-0d23-4c7f-aa16-b3bc13b01e4c"/{n;p;}' | cut -d ':' -f 2 | cut -d ',' -f 1 | head -1 | tr -d \")
	InventoryStatus=$(curl -s -k -H "$siteid" -H "$Auth" -H "Client: ApiClient" -X GET "$Query" | sed -n '/"Status"/{n;n;n;p;}' | cut -d ':' -f 2 | cut -d ',' -f 1 | head -1 | tr -d \")

	#IIQ uses lots of spaces in its output.  Cut all that out.
	ASSETTAG="${ASSETTAG//[[:space:]]/}"
	MosyleTag="${MosyleTag//[[:space:]]/}"
	InventoryStatus="${InventoryStatus//[[:space:]]/}"
	
	#Find difference between current time and last time
	#device had checked in to Mosyle
	EpochDif=$(expr $current_time - $LASTCHECKIN)
	
	#Convert the Epoch time into hours.
	hours_SinceLastCheckIn=$(expr $EpochDif / 3600)
}

################################
#            DO WORK           #
################################
#Delete Slack File to make sure we dont get any repeats
rm -Rf "$SlackIt"

# Connect to Mosyle API multiple times (for each page) so we
# get all of the available data.
while true; do
	let "THECOUNT=$THECOUNT+1"
	THEPAGE="$THECOUNT"
	#													Get for AppleTV							Serial, Device name, tags, asset tag, last check in (epoch)
	content="{\"accessToken\":\"$APIKey\",\"options\":{\"os\":\"tvos\",\"specific_columns\":\"serial_number,device_name,tags,asset_tag,date_app_info\",\"page\":$THEPAGE}}"
	output=$(curl -s -k -X POST -d 'content='$content 'https://managerapi.mosyle.com/v2/listdevices') >> $LOG


	#Detect we just loaded a page with no content and stop.
	LASTPAGE=$(echo $output | grep DEVICES_NOTFOUND)
	if [ -n "$LASTPAGE" ]; then
		let "THECOUNT=$THECOUNT-1"
		log_line "Yo we are at the end of the list (Last good page was $THECOUNT)"
		break
	fi

	#This does not go to the log.  Just so you know Mosyle is actually telling us stuff.
	echo " "
	echo "Page $THEPAGE data."
	echo "-----------------------"
	 echo "$output"
	 echo "----------------------"

	#Now take the JSON data we received and parse it into tab delimited output.  | sed 's/"//'
	#NOTE The sed where it says null...  Sometimes null is given by Mosyle without qoutes even
	#though everything else has double qoutes.  Here we add double qoutes to null if we see it
	#that way so it doesn't throw everything else off.
	echo "$output" | awk 'BEGIN{FS=",";RS="},{"}{print $0}' | grep serial_number| sed 's/null/"null"/g' | perl -pe 's/.*"serial_number":"(.*?)","device_name":"?(.*?)"?,"tags":"?(.*?)"?,"asset_tag":"?(.*)","date_app_info":"?(.*?)",*.*/\1\t\2\t\3\t\4\t\5/' >> /tmp/Mosyle_active_ATVs.txt
done


#Go through our data file (built above) and see whats going on
for line in `cat /tmp/Mosyle_active_ATVs.txt`; do
	#ok so now we are going to process this data:
	SERIALNUMBER=$(echo "$line" | cut -f 1 -d$'\t')
	CURRENTNAME=$(echo "$line" | cut -f 2 -d$'\t')
	TAGS=$(echo "$line" | cut -f 3 -d$'\t')
	ASSETTAG=$(echo "$line" | cut -f 4 -d$'\t')
	LASTCHECKIN=$(echo "$line" | cut -f 5 -d$'\t')

	#Sanity check our data before we go any further
	CharCountSerial=$(echo -n "$SERIALNUMBER" | wc -c | tr -s " ")

	#If serial has more than 15 chars in it then it can't be right
	if [ "$CharCountSerial" -gt 15 ] ; then
		log_line "Bad parse, skipping."
		echo "Data didn't parse properly (#of $CharCountSerial) from-> $line" >> $SlackIt
		#Skip this line
		continue
	fi

	#Ask IncidentIQ for data.
	IIQ_Query

	#echo "Serial-> $SERIALNUMBER / Current Name-> $CURRENTNAME / Tags-> $TAGS / Asset Tag-> $ASSETTAG"

	#Check the asset tag field.  Make sure its set.
	if [[ -z "$ASSETTAG" ]] || [[ "$ASSETTAG" == "null" ]]; then
		log_line "Unit with serial $SERIALNUMBER has no Asset tag set."

		if [ -z "$ASSETTAG" ]; then
			log_line "$SERIALNUMBER--> Not in IncidentIQ.  Can't continue."
			echo "$SERIALNUMBER--> Not in IncidentIQ. EPIC FAIL" >> $SlackIt
			#Move on to the next device.
			continue

		else
			#We don't need to look this up again.  Single call to IIQ gave us this above.
			#ASSETTAG=$(echo "$FILEDATA" | cut -f 3 -d ',')

			log_line "File says unit with serial $SERIALNUMBER should have tag number $ASSETTAG.  Setting..."

			#Reach back out to Mosyle and set that tag number
			content="{\"accessToken\":\"$APIKey\",\"elements\":[{\"serialnumber\":\"$SERIALNUMBER\",\"asset_tag\":\"$ASSETTAG\"}]}"
			# curl  -s -k -X POST -d 'content='$content 'https://managerapi.mosyle.com/v2/devices' >> $LOG
			echo " " >> $LOG
		fi
	fi

	#As long as IIQ says device is In Service we should make sure
	#its setup properly.
	if [ "$InventoryStatus" = "InService" ]; then
		#Check the unit has a tag set.  For AppleTVs only one TAG is set
		#and that is what should be the name of the device.
		if [[ "$TAGS" == "null" ]] || [[ -z "$TAGS" ]]; then
			log_line "Unit with serial $SERIALNUMBER has no tags associated with it."

			#We already queried IIQ earlier for this info.
			if [ -z "$MosyleTag" ]; then
				log_line "$SERIALNUMBER--> IIQ doesnt have a mosyle tag for this.  Can't set device name."
				echo "$SERIALNUMBER--> No Mosyle_ATV_Tags Returned. EPIC FAIL" >> $SlackIt

			else
				log_line "File says unit with serial $SERIALNUMBER should  be tagged as $MosyleTag.  Setting..."

				content="{\"accessToken\":\"$APIKey\",\"elements\":[{\"serialnumber\":\"$SERIALNUMBER\",\"tags\":\"$MosyleTag\"}]}"
				# curl  -s -k -X POST -d 'content='$content 'https://managerapi.mosyle.com/v2/devices' >> $LOG
				echo " " >> $LOG

				echo "waiting for tag to set..."
				sleep 5
				content="{\"accessToken\":\"$APIKey\",\"elements\":[{\"serialnumber\":\"$SERIALNUMBER\",\"name\":\"$MosyleTag\"}]}"
				#curl  -s -k -X POST -d 'content='$content 'https://managerapi.mosyle.com/v2/devices' >> $LOG
				echo " " >> $LOG
			fi

		#If Mosyle has the STOLEN tag set
		elif [ "$TAGS" = "STOLEN" ]; then
			log_line "Unit with serial $SERIALNUMBER is beleived to be stolen.  Do nothing else."
			echo "$SERIALNUMBER--> Mosyle says STOLEN but IIQ doesn't.  Please CONFIRM." >> $SlackIt

		#IIQ doesnt have a Mosyle Tag for this device
		elif [ -z "$MosyleTag" ]; then
			log_line "$SERIALNUMBER--> IIQ doesnt have a mosyle tag for this.  Can't set device name."
			echo "$SERIALNUMBER--> No Mosyle_ATV_Tags Returned. EPIC FAIL" >> $SlackIt

		#If Mosyle tag (per mosyle) and Mosyle tags (per IIQ) dont match.
		elif [ ! "$MosyleTag" = "$CURRENTNAME" ]; then
			log_line "Unit with serial $SERIALNUMBER appears to be named wrong.  IS [$CURRENTNAME], SHOULD BE [$MosyleTag]"

			if [ "$hours_SinceLastCheckIn" -lt 48 ]; then
				content="{\"accessToken\":\"$APIKey\",\"elements\":[{\"serialnumber\":\"$SERIALNUMBER\",\"name\":\"$MosyleTag\"}]}"
				# curl  -s -k -X POST -d 'content='$content 'https://managerapi.mosyle.com/v2/devices' >> $LOG
				echo " " >> $LOG
			else
				log_line "$SERIALNUMBER hasn't check into Mosyle in over $hours_SinceLastCheckIn hours.  Not trying to set name."
			fi

		fi

	#If IIQ says something is stolen
	elif [ "$InventoryStatus" = "Stolen" ]; then
		#Does Mosyle Concur?
		if [ "$TAGS" = "STOLEN" ]; then
					log_line "$SERIALNUMBER--> IIQ and Mosyle say its stolen.  Doing nothing."
				else
					log_line "Unit with serial $SERIALNUMBER is beleived to be stolen per inventory.  Do nothing else."
					echo "$SERIALNUMBER--> IIQ says STOLEN but Mosyle doesn't.  Please CONFIRM." >> $SlackIt
				fi

	#If IIQ says device is in storage.
	elif  [ "$InventoryStatus" = "InStorage" ]; then
		log_line "IIQ says $SERIALNUMBER is not deployed.  Doing nothing."
	#If IIQ says device is Missing
	elif  [ "$InventoryStatus" = "Missing" ]; then
		log_line "IIQ says $SERIALNUMBER is Missing.  Doing nothing."
	#All other statuses in IIQ.
	else
		log_line "IIQ does not list $SERIALNUMBER in a deployable state.  Doing nothing."
		echo "$SERIALNUMBER--> is not Inservice or In storage per IIQ.  PLEASE CONFIRM." >> $SlackIt
	fi
done

#######################################
# Lets make some reports.  If stuff happened
# that mattered then Slack it.
#######################################
#Is there any apps which are new to our repo
if [ -s "$SlackIt" ]; then
	log_line "There appears to be noteworthy changes.  Will Slack out."

	echo "3.iPadLostTags.sh just ran and this happened" > /tmp/AppleTV_TagsNnames.sh-2Slack.txt

	cat $SlackIt >> /tmp/AppleTV_TagsNnames.sh-2Slack.txt
	cat	/tmp/AppleTV_TagsNnames.sh-2Slack.txt | /usr/local/bin/slacktee.sh -a warning -c mdm_activity

else
	log_line "There doesnt appear to be any new apps.  No Slack message will be posted."
fi


